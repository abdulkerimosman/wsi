/*// Read JSON data from file (if saved)
fetch('./python/data.json')
  .then(response => response.json())
  .then(data => {
    
    console.log('doluluk_zaman: No data', data)
    date_columns = ['2021-01-01', '2021-04-01', '2021-07-01', '2021-10-01',
      '2022-01-01', '2022-04-01', '2022-07-01', '2022-10-01',
      '2023-01-01', '2023-04-01', '2023-07-01', '2023-10-01', 
      '2024-01-01', '2024-04-01', '2024-07-01', '2024-10-01',
      '2025-01-01', '2025-04-01', '2025-07-01', '2025-10-01']

      schools = [
        "Konak İngiliz Okulu",
        "Buca İngiliz Okulu",
        "Bornova İngiliz Okulu",
        "Balçova İngiliz Okulu",
        "Çiğli Amerikan Enstitüsü",
        "Narlıdere Amerikan Enstitüsü",
        "Bayraklı Amerikan Enstitüsü",
        "Karabağlar Amerikan Enstitüsü",
        "Bornova Deutschlandia",
        "Bayraklı Deutschlandia",
        "Konak Deutschlandia",
        "Karşıyaka Deutschlandia",
        "Karşıyaka İngiliz Okulu",
        "Gaziemir Amerikan Enstitüsü"
    ]

      new_data = []
    
      for(i=0;i<data.length;i++) {
        for(j=0;j<schools.length;j++){
          schools[j] = {
            data_columns[i] :data[schools[j]]
          }
        }
      }


  });

*/
fetch('./python/data.json')
    .then(response => response.json())
    .then(data => {
        const date_columns = [
            '2021-01-01', '2021-04-01', '2021-07-01', '2021-10-01',
            '2022-01-01', '2022-04-01', '2022-07-01', '2022-10-01',
            '2023-01-01', '2023-04-01', '2023-07-01', '2023-10-01', 
            '2024-01-01', '2024-04-01', '2024-07-01', '2024-10-01',
            '2025-01-01', '2025-04-01', '2025-07-01', '2025-10-01'
        ];
        // Initialize an object to store results
        const schoolData = {};

        // Iterate over each dictionary in data
        data.forEach((entry) => {
            // Iterate over each school in the current dictionary
            for (const [school, value] of Object.entries(entry)) {
                // Initialize an array for the school if not already present
                if (!schoolData[school]) {
                    schoolData[school] = [];
                }
                // Assign dates to the school's array
                date_columns.forEach((date) => {
                    schoolData[school].push({ date, value });
                });
            }
        });

        // Display the result as a JSON string
        document.querySelector("#text_deneme").innerHTML = `<pre>${JSON.stringify(schoolData, null, 2)}</pre>`;
    })
    .catch(error => {
        console.error('Error fetching or processing data:', error);
    });







    fetch('./python/data.json')
  .then(response => response.json())
  .then(data => {
    // Assuming `data` is an array of objects

    const dateColumns = [
        '2021-01-01', '2021-04-01', '2021-07-01', '2021-10-01',
        '2022-01-01', '2022-04-01', '2022-07-01', '2022-10-01',
        '2023-01-01', '2023-04-01', '2023-07-01', '2023-10-01', 
        '2024-01-01', '2024-04-01', '2024-07-01', '2024-10-01',
        '2025-01-01', '2025-04-01', '2025-07-01', '2025-10-01'
    ];

    const result = {};

    // Process the data
    data.forEach(entry => {
      Object.entries(entry).forEach(([key, value]) => {
        const formattedKey = key.toLowerCase().replace(/\s+/g, '_');
        if (!result[formattedKey]) {
          result[formattedKey] = [];
        }
        result[formattedKey].push(value);
      });
    });

    // Display the result
    document.querySelector("#text_deneme").innerHTML = JSON.stringify(result, null, 2);
  })
  .catch(error => {
    console.error('Error fetching or processing data:', error);
  });







  fetch('./python/data.json')
  .then(response => response.json())
  .then(data => {
    const dateColumns = [
        '2021-01-01', '2021-04-01', '2021-07-01', '2021-10-01',
        '2022-01-01', '2022-04-01', '2022-07-01', '2022-10-01',
        '2023-01-01', '2023-04-01', '2023-07-01', '2023-10-01', 
        '2024-01-01', '2024-04-01', '2024-07-01', '2024-10-01',
        '2025-01-01', '2025-04-01', '2025-07-01', '2025-10-01'
    ];

    const result = {};

    // Process the data
    data.forEach(entry => {
      Object.entries(entry).forEach(([key, value]) => {
        const formattedKey = key.toLowerCase().replace(/\s+/g, '_');
        if (!result[formattedKey]) {
          result[formattedKey] = [];
        }
        result[formattedKey].push(value);
      });
    });

    // Populate dropdown
    const dropdown = document.querySelector('#dropdown6_2');
    dropdown.innerHTML = Object.keys(result).map(key => 
      `<option value="${key}">${key}</option>`
    ).join('');

    const chartContainer6 = document.querySelector('#graph6_1');
    const canvas6 = document.createElement('canvas');
    canvas6.id = 'chartCanvas6';
    canvas6.width = 250;
    canvas6.height = 230;
    chartContainer6.innerHTML = ''; // Clear previous content
    chartContainer6.appendChild(canvas6);

    // Function to draw chart for a specific sube
    // Global variable to store the chart instance
    let myChart;

    const drawChart = (subeKey) => {
    const ctx = canvas6.getContext('2d');
    const chartData = {
        labels: dateColumns,
        datasets: [{
        label: subeKey,
        data: result[subeKey],
        backgroundColor: 'rgba(54, 162, 235, 0.7)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
        }]
    };

    // Destroy the existing chart instance if it exists
    if (myChart) {
        myChart.destroy();
    }

    // Create a new chart instance
    myChart = new Chart(ctx, {
        type: 'bar', // Change to 'line' if needed
        data: chartData,
        options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            x: {
            ticks: {
                font: {
                size: 5,
                family: 'Arial'
                },
                rotation: 90,
                align: 'start'
            },
            title: {
                display: true,
                text: 'Dates'
            }
            },
            y: {
            title: {
                display: true,
                text: 'Values'
            },
            beginAtZero: true
            }
        },
        plugins: {
            tooltip: {
            callbacks: {
                label: function (context) {
                return `${context.label}: ${context.raw}`;
                }
            }
            },
            legend: {
            display: true
            }
        }
        }
    });
    };


    // Initial chart for the first sube
    drawChart(Object.keys(result)[0]);

    // Update chart on dropdown change
    dropdown.addEventListener('change', (event) => {
      const selectedSube = event.target.value;
      drawChart(selectedSube);
    });
  })
  .catch(error => {
    console.error('Error fetching or processing data:', error);
  });
